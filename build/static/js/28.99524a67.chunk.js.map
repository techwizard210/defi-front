{"version":3,"sources":["helpers/databaseHelpers.js","assets/img/StakeRewards/stake.png","pages/StakeRewards/StakeList.js","pages/StakeRewards/StakingDialog.js","pages/StakeRewards/Mining.js","pages/StakeRewards/index.js","firebase.js"],"names":["getEarningSettings","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","resp","earningSettingsDbRecord","earningSettings","wrap","_context","prev","next","withoutWalletAuthFetchWrapper","sent","APR","apr","APRMultiplier","aprMultiplier","EarnMultiplier","earnMultiplier","abrupt","t0","stop","apply","arguments","StakeList","stakeToken","earnApr","minForEarn","_useWeb3React","useWeb3React","account","chainId","classes","useStyles","stakelist","_jsxs","_Fragment","children","_jsx","Grid","className","container","spacing","item","lg","md","sm","stake","Paper","stakepaper","alt","src","Stake","stakeimg","Typography","paragraph","variant","component","staketitle","headlineContent","concat","content1","stakecontent2","asteriskContent","Link","href","underline","target","rel","stakeFooter","stakeFooterButtonWrapper","Button","stakeBtn","disabled","parseInt","process","onClick","e","uuid_v4","StakingDailog","props","_useState","useState","_useState2","_slicedToArray","isStakeProcessing","setIsStakeProcessing","_useState3","_useState4","isWithdrawProcessing","setIsWithdrawProcessing","open","state","handleClose","setStakeAmount","setWithdrawAmount","sendStakeToken","actionType","minimumRequiredAmount","stakeAmount","factoryContract","calculatedPrice","_isValidChainId","toast","error","minAmountForEarn","Number","getGameFactoryContractInstance","parseUnits","approveTokenToContract","userAddress","methods","stakeTokens","send","from","success","setTimeout","window","location","reload","t1","message","withdrawToken","_ref2","_callee2","stakedAmount","_context2","withdrawAmount","withdrawStakedToken","Dialog","fullWidth","maxWidth","onClose","DialogTitle","id","style","textAlign","DialogContent","direction","justifyContent","alignItems","xs","Box","m","TextField","autoFocus","margin","label","value","parseFloat","tokenBalance","toLocaleString","undefined","minimumFractionDigits","InputProps","readOnly","type","onChange","inputMode","pattern","inputProps","min","helperText","color","CircularProgress","size","DialogActions","Mining","mining","availableRewardStatus","setAvailableRewardStatus","userReward","setUserReward","_useState5","_useState6","userThawing","setUserThawing","_useState7","_useState8","thawingPeriod","setThawingPeriod","_useState9","_useState10","displayTimer","setTimerDisplay","_useState11","totalApproved","totalRewarded","totalFrozen","totalWithdrawn","_useState12","statisticData","setStatisticData","countDownTimer","countDownDate","x","setInterval","now","distance","days","hours","minutes","seconds","Date","getTime","Math","floor","clearInterval","localStorage","setItem","useEffect","_init","thawingLockingPeriod","userRewards","userThawings","gameStatisticData","getThawingPeriod","getUserReward","getUserThawing","getGameStatisticData","approvedAmount","endTime","init","withdraw","_callee3","res","userID","userData","currentAchievements","_context3","startTime","claimReward","db","collection","where","get","docs","map","doc","data","achievements","update","compound","_ref3","_callee4","currentStakedAmount","_context4","freeze","address","amount","datetime","moment","zone","format","level","transactionHash","add","unfreeze","_ref4","_callee5","_context5","mingingrewards","TextCenter","clsx","TextColor","itemtitle","TextColorGrey","middleTextGroup","ColorStyle","LinearProgress","tokenstatus","fixedHeight","miningBtns","compoundButton","displayFormatTime","StakeRewards","stakerewards","backdrops","backdrop","setOpen","isLoading","setLoading","bnbBalance","withdrawFee","MINIMUM_BALANCE_FOR_EARN","itemPrice","ITEM_PRICE","setUserState","preventDefault","_objectSpread","_x","_x2","defaultBalance","goldPrice","silverPrice","bronzePrice","getUserStakingAmount","getBNBBalance","getTokenBalance","getDefaultAddres","getBaseStakeAmountForEarn","getGoldItemPrice","getSilverItemPrice","getBronzeItemPrice","getWithdrawFee","toFixed","_initNoAccount","newState","initNoAccount","root","padMeUp","StakingDialog","Backdrop","zIndex","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","firestore","firestorage","storage"],"mappings":"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","file":"static/js/28.99524a67.chunk.js","sourcesContent":["import { withoutWalletAuthFetchWrapper } from './apiFetchWrappers';\r\n\r\nexport const getEarningSettings = async () => {\r\n  try {\r\n    const resp = await withoutWalletAuthFetchWrapper(\r\n      'Earnings/GetEarningsSettings',\r\n      'GET',\r\n      null\r\n    );\r\n    const earningSettingsDbRecord = resp;\r\n\r\n    const earningSettings = {};\r\n    if (earningSettingsDbRecord) {\r\n      earningSettings.APR = earningSettingsDbRecord.apr;\r\n      earningSettings.APRMultiplier = earningSettingsDbRecord.aprMultiplier;\r\n      earningSettings.EarnMultiplier = earningSettingsDbRecord.earnMultiplier;\r\n    }\r\n    return earningSettings;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n","export default __webpack_public_path__ + \"static/media/stake.54c646a4.png\";","import { v4 as uuid_v4 } from 'uuid';\r\n\r\n// ** Import Material-Ui Components\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\n// import Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Link from '@mui/material/Link';\r\n\r\nimport { useWeb3React } from '@web3-react/core';\r\n\r\nimport useStyles from '../../assets/styles';\r\n\r\nimport Stake from '../../assets/img/StakeRewards/stake.png';\r\n\r\nconst StakeList = ({ stakeToken, earnApr, minForEarn }) => {\r\n  const { account, chainId } = useWeb3React();\r\n  const classes = useStyles.stakelist();\r\n\r\n  return (\r\n    <>\r\n      <Grid className=\"staking\">STAKING</Grid>\r\n      <Grid container spacing={2}>\r\n        <Grid item lg={4} md={4} sm={12} />\r\n        <Grid\r\n          item\r\n          lg={4}\r\n          md={4}\r\n          sm={12}\r\n          key={uuid_v4()}\r\n          className={classes.stake}\r\n        >\r\n          <Paper className={classes.stakepaper}>\r\n            <div>\r\n              <img alt=\"EARN\" src={Stake} className={classes.stakeimg} />\r\n            </div>\r\n            <Typography\r\n              paragraph\r\n              variant=\"h5\"\r\n              component=\"h2\"\r\n              className={classes.staketitle}\r\n            >\r\n              EARN\r\n            </Typography>\r\n            <Typography paragraph className={classes.headlineContent}>\r\n              {earnApr ? `${earnApr}%` : '-'} APR*\r\n            </Typography>\r\n            <Typography paragraph className={classes.content1}>\r\n              Want to earn HiFi from playing our games?\r\n            </Typography>\r\n            <Typography paragraph className={classes.stakecontent2}>\r\n              {`Stake a minimum of ${minForEarn} HiFi to start earning today!`}\r\n            </Typography>\r\n            <Typography paragraph className={classes.stakecontent2}>\r\n              Withdraw at any time.\r\n            </Typography>\r\n            <Typography paragraph className={classes.asteriskContent}>\r\n              <Link\r\n                href=\"https://hifigamingsociety.medium.com/2b76ed432067\"\r\n                underline=\"none\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n              >\r\n                *Read more about the qualifying conditions\r\n              </Link>\r\n            </Typography>\r\n            <div className={classes.stakeFooter} />\r\n            <div className={classes.stakeFooterButtonWrapper}>\r\n              <Button\r\n                variant=\"contained\"\r\n                className={classes.stakeBtn}\r\n                disabled={\r\n                  !account ||\r\n                  chainId !== parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\n                }\r\n                onClick={(e) => stakeToken(e, 'EARN')}\r\n              >\r\n                Stake / UnStake\r\n              </Button>\r\n            </div>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item lg={4} md={4} sm={12} />\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StakeList;\r\n","import { useState } from 'react';\r\n\r\n// ** Import Material-Ui Components\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { useWeb3React } from '@web3-react/core';\r\n\r\nimport { toast } from 'react-toastify';\r\n\r\n// ** Import Images\r\nimport { parseUnits } from '@ethersproject/units';\r\n\r\nimport {\r\n  getGameFactoryContractInstance,\r\n  approveTokenToContract,\r\n  _isValidChainId,\r\n} from '../../helpers';\r\n\r\nconst StakingDailog = (props) => {\r\n  const [isStakeProcessing, setIsStakeProcessing] = useState(false);\r\n  const [isWithdrawProcessing, setIsWithdrawProcessing] = useState(false);\r\n\r\n  const { open, state, handleClose, setStakeAmount, setWithdrawAmount } = props;\r\n\r\n  const { account, chainId } = useWeb3React();\r\n\r\n  const sendStakeToken = async () => {\r\n    if (!account || !chainId || !(await _isValidChainId())) {\r\n      toast.error(`Unsupported network. Please Change Network`);\r\n      return;\r\n    }\r\n\r\n    const actionType = 2;\r\n    const minimumRequiredAmount = state.minAmountForEarn;\r\n    const { stakeAmount } = state;\r\n\r\n    if (Number(stakeAmount) < Number(minimumRequiredAmount)) {\r\n      toast.error(`Stake amount must be greater that ${minimumRequiredAmount}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsStakeProcessing(true);\r\n      const factoryContract = getGameFactoryContractInstance();\r\n      const calculatedPrice = parseUnits(stakeAmount);\r\n      await approveTokenToContract(calculatedPrice, state.userAddress);\r\n      await factoryContract.methods\r\n        .stakeTokens(actionType, calculatedPrice)\r\n        .send({ from: state.userAddress });\r\n\r\n      toast.success(`Successfully staked ${stakeAmount} tokens`);\r\n\r\n      setIsStakeProcessing(false);\r\n      setTimeout(() => {\r\n        window.location.reload();\r\n      }, 1000);\r\n    } catch (err) {\r\n      toast.error(\r\n        err.message\r\n          ? err.message\r\n          : `Transaction Failed. Please make sure you have sufficient balance and Minimum Balance`\r\n      );\r\n    }\r\n    setIsStakeProcessing(false);\r\n  };\r\n\r\n  const withdrawToken = async () => {\r\n    if (!account || !chainId || !(await _isValidChainId())) {\r\n      toast.error(`Unsupported network. Please Change Network`);\r\n      return;\r\n    }\r\n    const actionType = 2;\r\n    const stakedAmount = state.stakedAmount[1];\r\n    if (state.withdrawAmount < 0) {\r\n      toast.error(`Withdraw amount must be greater than 0`);\r\n      return;\r\n    }\r\n    if (state.withdrawAmount > Number(stakedAmount)) {\r\n      toast.error(`Insufficient Balance to withdraw.`);\r\n      return;\r\n    }\r\n    try {\r\n      setIsWithdrawProcessing(true);\r\n      const factoryContract = getGameFactoryContractInstance();\r\n      const calculatedPrice = parseUnits(state.withdrawAmount);\r\n      await approveTokenToContract(state.withdrawAmount, state.userAddress);\r\n      await factoryContract.methods\r\n        .withdrawStakedToken(actionType, calculatedPrice)\r\n        .send({ from: state.userAddress });\r\n\r\n      toast.success(`Successfully withdrawn ${state.withdrawAmount} tokens`);\r\n\r\n      setIsWithdrawProcessing(false);\r\n      setTimeout(() => {\r\n        window.location.reload();\r\n      }, 1000);\r\n    } catch (err) {\r\n      toast.error(\r\n        err.message\r\n          ? err.message\r\n          : `Transaction Failed. Please make sure you have sufficient balance and Minimum Balance`\r\n      );\r\n    }\r\n    setIsWithdrawProcessing(false);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      fullWidth\r\n      maxWidth=\"sm\"\r\n      open={open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"max-width-dialog-title\"\r\n    >\r\n      <DialogTitle id=\"max-width-dialog-title\" style={{ textAlign: 'center' }}>\r\n        Stake / Unstake for EARN\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs>\r\n            <Box m={2}>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                label=\"HiFi Balance\"\r\n                fullWidth\r\n                value={parseFloat(\r\n                  state.tokenBalance.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                  })\r\n                )}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Box m={2}>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                label=\"HiFi Staked\"\r\n                fullWidth\r\n                value={Number.parseInt(state.stakedAmount[1], 10) || 0}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs>\r\n            <Box m={2}>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                label=\"Stake Amount\"\r\n                fullWidth\r\n                type=\"number\"\r\n                value={state.stakeAmount}\r\n                onChange={setStakeAmount}\r\n                InputProps={{\r\n                  inputMode: 'numeric',\r\n                  pattern: '[0-9]*',\r\n                  inputProps: {\r\n                    min: Number.parseInt(state.minAmountForEarn, 10),\r\n                  },\r\n                }}\r\n                helperText={`Stake at least ${Number.parseInt(\r\n                  state.minAmountForEarn,\r\n                  10\r\n                )} to enable ${state.actionType}`}\r\n              />\r\n\r\n              <Button\r\n                onClick={sendStakeToken}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n              >\r\n                {!isStakeProcessing ? (\r\n                  'Stake'\r\n                ) : (\r\n                  <>\r\n                    <CircularProgress color=\"primary\" size={20} />\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Box m={2}>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                label=\"Withdraw Amount\"\r\n                type=\"number\"\r\n                fullWidth\r\n                value={state.withdrawAmount}\r\n                onChange={setWithdrawAmount}\r\n                variant=\"filled\"\r\n                helperText=\"* 4% withdrawal fee\"\r\n              />\r\n              <Button\r\n                onClick={withdrawToken}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                {!isWithdrawProcessing ? (\r\n                  'Withdraw'\r\n                ) : (\r\n                  <>\r\n                    <CircularProgress color=\"secondary\" size={20} />\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\">\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default StakingDailog;\r\n","import { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\n\r\n// ** Import Material-Ui Components\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nimport { useWeb3React } from '@web3-react/core';\r\n\r\nimport { toast } from 'react-toastify';\r\n\r\nimport {\r\n  getGameFactoryContractInstance,\r\n  displayFormatTime,\r\n  _isValidChainId,\r\n  getThawingPeriod,\r\n  getUserReward,\r\n  getUserThawing,\r\n  getGameStatisticData,\r\n} from '../../helpers';\r\n\r\nimport { db } from '../../firebase';\r\nimport useStyles from '../../assets/styles';\r\n\r\nconst Mining = (props) => {\r\n  const classes = useStyles.mining();\r\n\r\n  const [availableRewardStatus, setAvailableRewardStatus] = useState(false);\r\n  const [userReward, setUserReward] = useState([]);\r\n  const [userThawing, setUserThawing] = useState([]);\r\n  const [thawingPeriod, setThawingPeriod] = useState(null);\r\n  const [displayTimer, setTimerDisplay] = useState('Unavailable');\r\n\r\n  const { state } = props;\r\n\r\n  const { account, chainId } = useWeb3React();\r\n\r\n  const [statisticData, setStatisticData] = useState({\r\n    totalApproved: 0,\r\n    totalRewarded: 0,\r\n    totalFrozen: 0,\r\n    totalWithdrawn: 0,\r\n  });\r\n\r\n  const countDownTimer = (countDownDate) => {\r\n    // Update the count down every 1 second\r\n    const x = setInterval(async () => {\r\n      // Get today's date and time\r\n      const now = new Date().getTime();\r\n\r\n      // Find the distance between now and the count down date\r\n      const distance = countDownDate - now;\r\n\r\n      // Time calculations for days, hours, minutes and seconds\r\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n\r\n      let hours = Math.floor(\r\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n      );\r\n      if (hours < 10) hours = `0${hours}`;\r\n\r\n      let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n      if (minutes < 10) minutes = `0${minutes}`;\r\n\r\n      let seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n      if (seconds < 10) seconds = `0${seconds}`;\r\n\r\n      // Output the result in an element with id=\"demo\"\r\n      setTimerDisplay(`${days}d : ${hours}h : ${minutes}m : ${seconds}s `);\r\n\r\n      // If the count down is over, write some text\r\n      if (distance < 0) {\r\n        clearInterval(x);\r\n        localStorage.setItem(`${state.userAddress}_thawingStatus`, false);\r\n        localStorage.setItem(`${state.userAddress}_thawingEndTime`, 0);\r\n        setAvailableRewardStatus(true);\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function init() {\r\n      const validChain = await _isValidChainId();\r\n      if (!validChain) {\r\n        toast.error('Unsupported network');\r\n      } else {\r\n        const thawingLockingPeriod = await getThawingPeriod();\r\n        setThawingPeriod(thawingLockingPeriod);\r\n\r\n        const userRewards = await getUserReward();\r\n        setUserReward(userRewards);\r\n\r\n        const userThawings = await getUserThawing();\r\n        setUserThawing(userThawings);\r\n\r\n        const gameStatisticData = await getGameStatisticData();\r\n        setStatisticData(gameStatisticData);\r\n        if (userThawings.approvedAmount > 0) setAvailableRewardStatus(true);\r\n        const now = new Date().getTime() / 1000;\r\n\r\n        if (now < Number(userThawings.endTime)) {\r\n          setAvailableRewardStatus(false);\r\n          countDownTimer(Number(userThawings.endTime) * 1000);\r\n        } else {\r\n          localStorage.setItem(`${state.userAddress}_thawingStatus`, false);\r\n          localStorage.setItem(`${state.userAddress}_thawingEndTime`, 0);\r\n        }\r\n      }\r\n    }\r\n    if (account) {\r\n      init();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [account]);\r\n\r\n  const withdraw = async () => {\r\n    if (userThawing.startTime === '0') {\r\n      toast.error(`Not Available reward`);\r\n      return;\r\n    }\r\n\r\n    if (!account || !chainId || !(await _isValidChainId())) {\r\n      toast.error(`Unsupported network. Please Change Network`);\r\n      return;\r\n    }\r\n    try {\r\n      const factoryContract = getGameFactoryContractInstance();\r\n      await factoryContract.methods\r\n        .claimReward()\r\n        .send({ from: state.userAddress });\r\n\r\n      const res = await db\r\n        .collection('users')\r\n        .where('address', '==', state.userAddress)\r\n        .get();\r\n      const userID = res.docs.map((doc) => doc.id);\r\n      const userData = res.docs.map((doc) => doc.data());\r\n      const currentAchievements = Number(userData[0].achievements)\r\n        ? Number(userData[0].achievements)\r\n        : 0;\r\n      await db\r\n        .collection('users')\r\n        .doc(userID[0])\r\n        .update({\r\n          achievements:\r\n            currentAchievements + Number(userThawing.approvedAmount),\r\n        });\r\n\r\n      toast.success(`Reward withdrawn successfully`);\r\n\r\n      window.location.reload();\r\n    } catch (err) {\r\n      toast.error(\r\n        err.message\r\n          ? err.message\r\n          : `Transaction Failed. The amount is still locked`\r\n      );\r\n\r\n      // console.log(err);\r\n    }\r\n  };\r\n\r\n  const compound = async () => {\r\n    if (userThawing.startTime === '0') {\r\n      toast.error(`Compound unavailable`);\r\n      return;\r\n    }\r\n    if (!account || !chainId || !(await _isValidChainId())) {\r\n      toast.error(`Unsupported network. Please Change Network`);\r\n      return;\r\n    }\r\n    try {\r\n      const factoryContract = getGameFactoryContractInstance();\r\n      await factoryContract.methods.freeze().send({ from: state.userAddress });\r\n\r\n      const res = await db\r\n        .collection('users')\r\n        .where('address', '==', state.userAddress)\r\n        .get();\r\n\r\n      const userID = res.docs.map((doc) => doc.id);\r\n      const userData = res.docs.map((doc) => doc.data());\r\n      const currentStakedAmount = Number(userData[0].stakedAmount)\r\n        ? Number(userData[0].stakedAmount)\r\n        : 0;\r\n\r\n      await db\r\n        .collection('users')\r\n        .doc(userID[0])\r\n        .update({\r\n          stakedAmount:\r\n            currentStakedAmount + Number(userThawing.approvedAmount),\r\n        });\r\n\r\n      const currentAchievements = Number(userData[0].achievements)\r\n        ? Number(userData[0].achievements)\r\n        : 0;\r\n      await db\r\n        .collection('users')\r\n        .doc(userID[0])\r\n        .update({\r\n          achievements:\r\n            currentAchievements + Number(userThawing.approvedAmount),\r\n        });\r\n\r\n      const data = {\r\n        address: state.userAddress,\r\n        amount: Number(userThawing.approvedAmount),\r\n        datetime: moment()\r\n          .zone(-6)\r\n          .format('MMMM DD, YYYY [at] hh:mm:ss A [UTC-6]'),\r\n        level: 2,\r\n        transactionHash: '',\r\n        type: 'in',\r\n      };\r\n      await db.collection('stakeHistory').add(data);\r\n\r\n      toast.success(`Earnings compounded successfully`);\r\n      window.location.reload();\r\n    } catch (err) {\r\n      toast.error(\r\n        err.message\r\n          ? err.message\r\n          : `Transaction Failed. The amount is still locked`\r\n      );\r\n    }\r\n  };\r\n\r\n  const unfreeze = async () => {\r\n    if (!account || !chainId || !(await _isValidChainId())) {\r\n      toast.error(`Unsupported network. Please Change Network`);\r\n      return;\r\n    }\r\n    try {\r\n      const factoryContract = getGameFactoryContractInstance();\r\n      await factoryContract.methods\r\n        .unfreeze()\r\n        .send({ from: state.userAddress });\r\n      localStorage.setItem(`${state.userAddress}_thawingStatus`, true);\r\n      toast.error('Reward unfreezed successfully.');\r\n\r\n      window.location.reload();\r\n    } catch (err) {\r\n      toast.error(\r\n        err.message\r\n          ? err.message\r\n          : `Transaction Failed. The amount is still locked`\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid className=\"mining\">MINING</Grid>\r\n      <Grid container spacing={1} className={classes.mingingrewards}>\r\n        <Grid item>\r\n          <Typography className={classes.TextCenter}>\r\n            Available HIFI Rewards\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography\r\n            className={clsx(\r\n              classes.TextCenter,\r\n              classes.TextColor,\r\n              classes.itemtitle\r\n            )}\r\n          >\r\n            {userThawing.approvedAmount} HIFI\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography className={classes.TextCenter}>\r\n            <Box component=\"span\" className={classes.TextColorGrey}>\r\n              {'You will receive '}\r\n            </Box>\r\n            <Box component=\"span\" className={classes.TextColor}>\r\n              {userReward.approvedAmount}\r\n            </Box>\r\n            <Box component=\"span\" className={classes.TextColorGrey}>\r\n              {' HIFI'}\r\n            </Box>\r\n          </Typography>\r\n        </Grid>\r\n        <Grid className=\"rewards\">REWARDS</Grid>\r\n        <Grid item container className={classes.middleTextGroup}>\r\n          <Typography\r\n            className={clsx(classes.TextCenter, classes.TextColorGrey)}\r\n          >\r\n            {`Mined: ${statisticData.totalApproved} / 300, 000, 000`}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item className={classes.ColorStyle}>\r\n          <LinearProgress\r\n            variant=\"determinate\"\r\n            color=\"secondary\"\r\n            value={Number(statisticData.totalApproved)}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography className={classes.TextCenter}>\r\n            {'A total of '}\r\n            <Box component=\"span\" className={classes.TextColor}>\r\n              {`${statisticData.totalFrozen}  HIFI `}\r\n            </Box>\r\n            {' is frozen across the network'}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item container spacing={2}>\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <Paper className={classes.tokenstatus}>\r\n              <Typography\r\n                paragraph\r\n                className={clsx(classes.fixedHeight, classes.TextColorGrey)}\r\n              >\r\n                Reward\r\n              </Typography>\r\n              <Typography paragraph>\r\n                {userReward.approvedAmount}{' '}\r\n                <Box component=\"span\" className={classes.TextColor}>\r\n                  HiFi\r\n                </Box>\r\n              </Typography>\r\n              {userReward.approvedAmount > 0 ? (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  className={classes.miningBtns}\r\n                  onClick={unfreeze}\r\n                  disabled={!account}\r\n                >\r\n                  Unfreeze\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  className={classes.miningBtns}\r\n                  disabled={!account}\r\n                >\r\n                  Unavailable\r\n                </Button>\r\n              )}\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item lg={6} md={6} sm={12} xs={12}>\r\n            <Paper className={classes.tokenstatus}>\r\n              <Typography\r\n                paragraph\r\n                className={clsx(classes.fixedHeight, classes.TextColorGrey)}\r\n              >\r\n                {availableRewardStatus ? 'Available' : 'Thawing'}\r\n              </Typography>\r\n              <Typography paragraph>\r\n                {userThawing.approvedAmount}{' '}\r\n                <Box component=\"span\" className={classes.TextColor}>\r\n                  HiFi\r\n                </Box>\r\n              </Typography>\r\n              {availableRewardStatus ? (\r\n                <>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    className={`${classes.miningBtns} ${classes.compoundButton}`}\r\n                    onClick={compound}\r\n                    disabled={!account}\r\n                  >\r\n                    Compound\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    className={classes.miningBtns}\r\n                    onClick={withdraw}\r\n                    disabled={!account}\r\n                  >\r\n                    Withdraw\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  className={classes.miningBtns}\r\n                  disabled={!account}\r\n                >\r\n                  {displayTimer}\r\n                </Button>\r\n              )}\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <Box className={classes.TextCenter}>\r\n            {'HIFI will be frozen for '}\r\n            <Box component=\"span\" className={classes.TextColor}>\r\n              {displayFormatTime(thawingPeriod)}\r\n            </Box>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Mining;\r\n","import { useState, useEffect } from 'react';\r\n\r\n// ** Import Material-Ui Components\r\nimport Box from '@material-ui/core/Box';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport {\r\n  getBNBBalance,\r\n  getTokenBalance,\r\n  getUserStakingAmount,\r\n  getDefaultAddres,\r\n  getBaseStakeAmountForEarn,\r\n  getGoldItemPrice,\r\n  getSilverItemPrice,\r\n  getBronzeItemPrice,\r\n  getWithdrawFee,\r\n  _isValidChainId,\r\n} from '../../helpers';\r\nimport { MINIMUM_BALANCE_FOR_EARN, ITEM_PRICE } from '../../constants';\r\n\r\nimport { getEarningSettings } from '../../helpers/databaseHelpers';\r\n\r\nimport useStyles from '../../assets/styles';\r\n\r\nimport StakeList from './StakeList';\r\nimport StakingDialog from './StakingDialog';\r\nimport Mining from './Mining';\r\n\r\nconst StakeRewards = () => {\r\n  const classes = useStyles.stakerewards();\r\n  const backdrops = useStyles.backdrop();\r\n  const [open, setOpen] = useState(false);\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  const { chainId, account } = useWeb3React();\r\n\r\n  const [state, setUserState] = useState({\r\n    userAddress: '',\r\n    stakedAmount: '0',\r\n    stakeAmount: '0',\r\n    withdrawAmount: '0',\r\n    bnbBalance: '0',\r\n    tokenBalance: '0',\r\n    actionType: 'PLAY',\r\n    withdrawFee: '4',\r\n    minAmountForEarn: MINIMUM_BALANCE_FOR_EARN,\r\n    itemPrice: ITEM_PRICE,\r\n    chainId,\r\n    earnApr: null,\r\n  });\r\n\r\n  const setStakeAmount = (e) => {\r\n    setUserState({\r\n      ...state,\r\n      stakeAmount: e.target.value,\r\n    });\r\n  };\r\n\r\n  const setWithdrawAmount = (e) => {\r\n    setUserState({\r\n      ...state,\r\n      withdrawAmount: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleCloseBackdrop = () => {\r\n    setLoading(false);\r\n  };\r\n\r\n  const stakeToken = async (e, item) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setUserState({\r\n      ...state,\r\n      actionType: item,\r\n    });\r\n    setOpen(true);\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleClose = async () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function init() {\r\n      const validChain = await _isValidChainId();\r\n      if (!validChain) {\r\n        toast.error('Unsupported network');\r\n      } else {\r\n        const stakeTokens = await getUserStakingAmount();\r\n        const defaultBalance = await getBNBBalance();\r\n        const tokenBalance = await getTokenBalance();\r\n        const userAddress = await getDefaultAddres();\r\n        const minAmountForEarn = await getBaseStakeAmountForEarn();\r\n        const goldPrice = await getGoldItemPrice();\r\n        const silverPrice = await getSilverItemPrice();\r\n        const bronzePrice = await getBronzeItemPrice();\r\n        const withdrawFee = await getWithdrawFee();\r\n        const earningSettings = await getEarningSettings();\r\n        setUserState({\r\n          userAddress,\r\n          stakedAmount: stakeTokens,\r\n          bnbBalance: defaultBalance,\r\n          tokenBalance,\r\n          withdrawFee,\r\n          minAmountForEarn,\r\n          itemPrice: [goldPrice, silverPrice, bronzePrice],\r\n          earnApr: Number(\r\n            Number(earningSettings.APR * earningSettings.APRMultiplier).toFixed(\r\n              2\r\n            )\r\n          ),\r\n        });\r\n      }\r\n    }\r\n    async function initNoAccount() {\r\n      const validChain = await _isValidChainId();\r\n      if (!validChain) {\r\n        toast.error('Unsupported network');\r\n      } else {\r\n        const minAmountForEarn = await getBaseStakeAmountForEarn();\r\n        const goldPrice = await getGoldItemPrice();\r\n        const silverPrice = await getSilverItemPrice();\r\n        const bronzePrice = await getBronzeItemPrice();\r\n        const withdrawFee = await getWithdrawFee();\r\n        const earningSettings = await getEarningSettings();\r\n        const newState = { ...state };\r\n        newState.withdrawFee = withdrawFee;\r\n        newState.minAmountForEarn = minAmountForEarn;\r\n        newState.itemPrice = [goldPrice, silverPrice, bronzePrice];\r\n        newState.earnApr = Number(\r\n          Number(earningSettings.APR * earningSettings.APRMultiplier).toFixed(2)\r\n        );\r\n\r\n        setUserState(newState);\r\n      }\r\n    }\r\n    if (account) {\r\n      init();\r\n    } else {\r\n      initNoAccount();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [account]);\r\n\r\n  return (\r\n    <>\r\n      <Box className={`${classes.root} ${classes.padMeUp}`}>\r\n        <StakeList\r\n          stakeToken={stakeToken}\r\n          earnApr={state.earnApr}\r\n          minForEarn={Number(state.minAmountForEarn).toLocaleString(0)}\r\n        />\r\n        <Mining state={state} />\r\n        <StakingDialog\r\n          open={open}\r\n          state={state}\r\n          handleClose={handleClose}\r\n          setStakeAmount={setStakeAmount}\r\n          setWithdrawAmount={setWithdrawAmount}\r\n        />\r\n      </Box>\r\n      <Backdrop\r\n        className={backdrops.backdrop}\r\n        open={isLoading}\r\n        onClick={handleCloseBackdrop}\r\n        style={{ zIndex: 999999 }}\r\n      >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StakeRewards;\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/database'; // for realtime database\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\nimport 'firebase/auth';\r\n\r\n// require('dotenv').config();\r\n\r\nconst myfirebase = firebase.initializeApp({\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\r\n});\r\nconst db = firebase.firestore();\r\nconst firestorage = firebase.storage();\r\n\r\nexport { myfirebase, db, firestorage };\r\n"],"sourceRoot":""}