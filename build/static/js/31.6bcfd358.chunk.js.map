{"version":3,"sources":["pages/NFTView/LevelTrackDialog.js","pages/NFTView/StakingDialog.js","components/CountdownTimer.js","pages/NFTView/index.js"],"names":["LevelTrackDialog","props","open","handleClose","levelTrack","currentLevel","_jsxs","Dialog","fullWidth","maxWidth","onClose","className","children","_jsx","DialogTitle","id","style","textAlign","DialogContent","Grid","container","length","map","level","_level$perks","_level$perks2","item","lg","md","sm","xs","concat","uuid_v4","xpRequirement","perks","_Fragment","perk","PersonAddAltIcon","description","DialogActions","Button","onClick","color","StakingDailog","_useState","useState","_useState2","_slicedToArray","isStakeProcessing","setIsStakeProcessing","_useState3","_useState4","isWithdrawProcessing","setIsWithdrawProcessing","_useForm","useForm","control","setValue","stakingOption","minDepositAmount","nftIndex","tokenBalance","_useState5","_useState6","stakeAmount","setStakeAmount","_useWeb3React","useWeb3React","account","chainId","hasVesting","bonus","stakeTokens","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","nftStakingContract","calculatedPrice","wrap","_context","prev","next","t0","_isValidChainId","sent","toast","error","abrupt","Number","parseInt","currentlyStaked","getNFTStakingContractInstance","parseUnits","approveTokenToNFTStakeContract","methods","deposit","index","IntoTheHifiverseNFTContract","send","from","success","setTimeout","window","location","reload","t1","message","stop","apply","arguments","withdrawToken","_ref2","_callee2","withdrawAmount","remainingBalance","userPoolsForNFT","poolId","i","poolToWithdrawFrom","_context2","_formValues","WithdrawAmount","getUserPoolsForNFT","call","pools","withdraw","direction","justifyContent","alignItems","vestingPeriod","Box","m","TextField","margin","label","value","parseFloat","toLocaleString","undefined","minimumFractionDigits","InputProps","readOnly","autoFocus","type","onChange","e","target","inputMode","pattern","inputProps","min","helperText","variant","CircularProgress","size","unlockDate","unlockMilliseconds","Controller","render","_ref3","field","name","defaultValue","moment","format","CountdownTimer","expiryDateProp","callBackFunc","countdownTimer","setCountdownTimer","useEffect","countDownDate","x","setInterval","now","distance","days","hours","minutes","seconds","Date","getTime","Math","floor","clearInterval","countDownTimer","NFTView","wipeSignatureAndReRequest","_useParams","useParams","collection","nftData","setNftData","stakingOptions","setStakingOptions","selectedStakingOption","setSelectedStakingOption","_useState7","_useState8","setMinDepositAmount","_useState9","_useState10","setTokenBalance","_useState11","_useState12","setOpen","_useState13","_useState14","openStaking","setOpenStaking","handleOpen","handleStakingClose","_callee3","_context3","handleStakingOpen","_ref4","_callee4","_context4","_x","_init","_callee5","url","resp","minimumNFTStakeAmount","stakingOptionLength","contractStakingOptions","j","so","_loop","dt","_context6","walletAuthFetchWithSigPrompt","getMinimumNFTStakeAmount","getStakingOptionLength","push","matchingUserPool","matchingPool","matchedDBStakingOption","_stakingOption","_context5","getUserPoolInfo","find","parseBalance","amount","duration","vestingStart","setSeconds","getSeconds","delegateYield","levelInfo","hoursUntilNextLevel","dateOfNextLevel","getTokenBalance","t2","init","option","NFTProperties","_nftData$properties","CardContent","properties","prop","slot","HeaderCard","_ref5","_nftData$info","Card","src","process","image","alt","width","tierReadable","tokensStaked","info","title","TimelineIcon","additionalInfo","BrowserView","spacing","MobileView","StakingDialog"],"mappings":"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","file":"static/js/31.6bcfd358.chunk.js","sourcesContent":["import { v4 as uuid_v4 } from 'uuid';\r\n\r\n// ** Import Material-Ui Components\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport PersonAddAltIcon from '@mui/icons-material/PersonAddAlt';\r\n\r\nconst LevelTrackDialog = (props) => {\r\n  const { open, handleClose, levelTrack, currentLevel } = props;\r\n\r\n  return (\r\n    <Dialog\r\n      fullWidth\r\n      maxWidth=\"sm\"\r\n      open={open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"max-width-dialog-title\"\r\n      className=\"levelTrackModal\"\r\n    >\r\n      <DialogTitle id=\"max-width-dialog-title\" style={{ textAlign: 'center' }}>\r\n        Level Rewards\r\n      </DialogTitle>\r\n      <DialogContent className=\"body\">\r\n        <Grid container>\r\n          {levelTrack?.length > 0 &&\r\n            levelTrack.map((level) => (\r\n              <Grid\r\n                key={uuid_v4()}\r\n                item\r\n                container\r\n                lg={12}\r\n                md={12}\r\n                sm={12}\r\n                xs={12}\r\n              >\r\n                <Grid\r\n                  key={uuid_v4()}\r\n                  item\r\n                  lg={2}\r\n                  md={2}\r\n                  sm={2}\r\n                  xs={2}\r\n                  className=\"progressColumn\"\r\n                >\r\n                  <div\r\n                    className={`progressLight ${\r\n                      currentLevel >= level.level ? 'active' : ''\r\n                    }`}\r\n                  >\r\n                    <div className=\"progressBobble\" />\r\n                  </div>\r\n                </Grid>\r\n                <Grid\r\n                  key={uuid_v4()}\r\n                  item\r\n                  lg={10}\r\n                  md={10}\r\n                  sm={10}\r\n                  xs={10}\r\n                  className={`levelInfoColumn ${\r\n                    currentLevel >= level.level ? 'active' : ''\r\n                  }`}\r\n                >\r\n                  <Grid item lg={12} md={12} sm={12} xs={12} className=\"level\">\r\n                    Level {level.level}\r\n                  </Grid>\r\n                  <Grid item lg={12} md={12} sm={12} xs={12} className=\"xpReq\">\r\n                    XP Required: {level.xpRequirement}\r\n                  </Grid>\r\n                  {level.perks?.length > 0 && (\r\n                    <Grid\r\n                      item\r\n                      lg={12}\r\n                      md={12}\r\n                      sm={12}\r\n                      xs={12}\r\n                      className=\"perks\"\r\n                    >\r\n                      <>\r\n                        Perks\r\n                        {level.perks?.length > 0 &&\r\n                          level.perks.map((perk) => (\r\n                            <Grid\r\n                              key={uuid_v4()}\r\n                              item\r\n                              lg={12}\r\n                              md={12}\r\n                              sm={12}\r\n                              xs={12}\r\n                              className=\"perk\"\r\n                            >\r\n                              <PersonAddAltIcon className=\"icon\" />\r\n                              <span className=\"description\">\r\n                                {perk.description}\r\n                              </span>\r\n                            </Grid>\r\n                          ))}\r\n                      </>\r\n                    </Grid>\r\n                  )}\r\n                  <hr />\r\n                </Grid>\r\n              </Grid>\r\n            ))}\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\">\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default LevelTrackDialog;\r\n","/* eslint-disable no-plusplus */\r\n/* eslint-disable no-await-in-loop */\r\nimport { useState } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\n\r\n// ** Import Material-Ui Components\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport moment from 'moment';\r\n\r\nimport { useWeb3React } from '@web3-react/core';\r\n\r\nimport { toast } from 'react-toastify';\r\n\r\n// ** Import Images\r\nimport { parseUnits } from '@ethersproject/units';\r\n\r\nimport {\r\n  getNFTStakingContractInstance,\r\n  approveTokenToNFTStakeContract,\r\n  _isValidChainId,\r\n} from '../../helpers';\r\n\r\nimport { IntoTheHifiverseNFTContract } from '../../constants';\r\n\r\nconst StakingDailog = (props) => {\r\n  const [isStakeProcessing, setIsStakeProcessing] = useState(false);\r\n  const [isWithdrawProcessing, setIsWithdrawProcessing] = useState(false);\r\n\r\n  const { control, setValue } = useForm();\r\n\r\n  const {\r\n    open,\r\n    handleClose,\r\n    stakingOption,\r\n    minDepositAmount,\r\n    nftIndex,\r\n    tokenBalance,\r\n  } = props;\r\n\r\n  const [stakeAmount, setStakeAmount] = useState(0);\r\n\r\n  const { account, chainId } = useWeb3React();\r\n\r\n  const hasVesting =\r\n    stakingOption?.bonus !== '' && stakingOption?.bonus !== 'None';\r\n\r\n  const setWithdrawToMax = () => {\r\n    if ((Number(stakingOption?.currentlyStaked) || 0) > 0) {\r\n      setValue('WithdrawAmount', stakingOption?.currentlyStaked);\r\n    }\r\n  };\r\n\r\n  const stakeTokens = async () => {\r\n    if (!account || !chainId || !(await _isValidChainId())) {\r\n      toast.error(`Unsupported network. Please Change Network`);\r\n      return;\r\n    }\r\n\r\n    if (\r\n      Number(stakeAmount) +\r\n        (Number.parseInt(stakingOption?.currentlyStaked, 10) || 0) <\r\n      Number(minDepositAmount)\r\n    ) {\r\n      toast.error(`Stake amount must be greater than ${minDepositAmount}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsStakeProcessing(true);\r\n      const nftStakingContract = getNFTStakingContractInstance();\r\n      const calculatedPrice = parseUnits(stakeAmount);\r\n      await approveTokenToNFTStakeContract(calculatedPrice, account);\r\n      await nftStakingContract.methods\r\n        .deposit(\r\n          stakingOption.index,\r\n          IntoTheHifiverseNFTContract,\r\n          Number(nftIndex),\r\n          calculatedPrice\r\n        )\r\n        .send({ from: account });\r\n\r\n      toast.success(`Successfully staked ${stakeAmount} tokens`);\r\n\r\n      setIsStakeProcessing(false);\r\n      setTimeout(() => {\r\n        window.location.reload();\r\n      }, 1000);\r\n    } catch (err) {\r\n      toast.error(\r\n        err.message\r\n          ? err.message\r\n          : `Transaction Failed. Please make sure you have sufficient balance and Minimum Balance`\r\n      );\r\n    }\r\n    setIsStakeProcessing(false);\r\n  };\r\n\r\n  const withdrawToken = async () => {\r\n    const withdrawAmount = control._formValues.WithdrawAmount;\r\n    if (!account || !chainId || !(await _isValidChainId())) {\r\n      toast.error(`Unsupported network. Please Change Network`);\r\n      return;\r\n    }\r\n\r\n    if (withdrawAmount < 0) {\r\n      toast.error(`Withdraw amount must be greater than 0`);\r\n      return;\r\n    }\r\n    if (withdrawAmount > Number(stakingOption.currentlyStaked)) {\r\n      toast.error(`Insufficient Balance to withdraw.`);\r\n      return;\r\n    }\r\n\r\n    const remainingBalance =\r\n      Number(stakingOption.currentlyStaked) - Number(withdrawAmount);\r\n\r\n    if (remainingBalance !== 0 && remainingBalance < Number(minDepositAmount)) {\r\n      toast.error(\r\n        `Withdrawal Error - you must either empty the pool or leave at least ${Number(\r\n          minDepositAmount\r\n        )} $HiFi in the pool`\r\n      );\r\n      return;\r\n    }\r\n    try {\r\n      setIsWithdrawProcessing(true);\r\n      const nftStakingContract = getNFTStakingContractInstance();\r\n      const calculatedPrice = parseUnits(withdrawAmount);\r\n      await approveTokenToNFTStakeContract(calculatedPrice, account);\r\n\r\n      const userPoolsForNFT = await nftStakingContract.methods\r\n        .getUserPoolsForNFT(\r\n          account,\r\n          IntoTheHifiverseNFTContract,\r\n          Number(nftIndex)\r\n        )\r\n        .call();\r\n\r\n      let poolId = 0;\r\n\r\n      for (let i = 0; i < userPoolsForNFT.length; i++) {\r\n        const index = userPoolsForNFT[i];\r\n        const poolToWithdrawFrom = await nftStakingContract.methods\r\n          .pools(Number(index) - 1)\r\n          .call();\r\n\r\n        if (Number(poolToWithdrawFrom.stakingOption) === stakingOption.index) {\r\n          poolId = index;\r\n        }\r\n      }\r\n\r\n      await nftStakingContract.methods\r\n        .withdraw(poolId, calculatedPrice)\r\n        .send({ from: account });\r\n\r\n      toast.success(`Successfully withdrawn ${calculatedPrice} tokens`);\r\n\r\n      setIsWithdrawProcessing(false);\r\n      setTimeout(() => {\r\n        window.location.reload();\r\n      }, 1000);\r\n    } catch (err) {\r\n      toast.error(\r\n        err.message\r\n          ? err.message\r\n          : `Transaction Failed. Please make sure you have sufficient balance and Minimum Balance`\r\n      );\r\n    }\r\n    setIsWithdrawProcessing(false);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      fullWidth\r\n      maxWidth=\"sm\"\r\n      open={open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"max-width-dialog-title\"\r\n      className=\"NFTStakingModal\"\r\n    >\r\n      <DialogTitle id=\"max-width-dialog-title\" className=\"title\">\r\n        Stake / Unstake to NFT\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"stakingOptionName\">\r\n              {stakingOption?.vestingPeriod}\r\n              {hasVesting && <> - {stakingOption?.bonus} Bonus XP</>}\r\n            </div>\r\n          </Grid>\r\n\r\n          <Grid item xs>\r\n            <Box m={2}>\r\n              <TextField\r\n                margin=\"dense\"\r\n                label=\"HiFi Balance\"\r\n                fullWidth\r\n                value={parseFloat(\r\n                  tokenBalance?.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                  })\r\n                )}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Box m={2}>\r\n              <TextField\r\n                margin=\"dense\"\r\n                label=\"HiFi Staked\"\r\n                fullWidth\r\n                value={Number(stakingOption?.currentlyStaked) || 0}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n                onClick={() => setWithdrawToMax()}\r\n                className=\"stakedAmount\"\r\n              />\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs>\r\n            <Box m={2}>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                label=\"Stake Amount\"\r\n                fullWidth\r\n                type=\"number\"\r\n                value={stakeAmount}\r\n                onChange={(e) => setStakeAmount(e.target.value)}\r\n                InputProps={{\r\n                  inputMode: 'numeric',\r\n                  pattern: '[0-9]*',\r\n                  inputProps: {\r\n                    min: Number.parseInt(minDepositAmount, 10),\r\n                  },\r\n                }}\r\n                helperText={`Stake at least ${Number.parseInt(\r\n                  minDepositAmount,\r\n                  10\r\n                )}`}\r\n              />\r\n\r\n              <Button\r\n                onClick={stakeTokens}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n              >\r\n                {!isStakeProcessing ? (\r\n                  'Stake'\r\n                ) : (\r\n                  <>\r\n                    <CircularProgress color=\"primary\" size={20} />\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Box m={2}>\r\n              {stakingOption?.unlockDate === null}\r\n              {(stakingOption?.unlockDate === null ||\r\n                stakingOption?.unlockMilliseconds <= 0) &&\r\n                stakingOption?.currentlyStaked > 0 && (\r\n                  <form>\r\n                    <Controller\r\n                      render={({ field }) => (\r\n                        <TextField\r\n                          autoFocus\r\n                          margin=\"dense\"\r\n                          label=\"Withdraw Amount\"\r\n                          type=\"number\"\r\n                          fullWidth\r\n                          value={field.value}\r\n                          onChange={(e) => field.onChange(e.target.value)}\r\n                          variant=\"filled\"\r\n                          helperText=\"Click on staked amount to set to max\"\r\n                          className=\"withdraw\"\r\n                        />\r\n                      )}\r\n                      control={control}\r\n                      name=\"WithdrawAmount\"\r\n                      defaultValue=\"\"\r\n                    />\r\n\r\n                    <Button\r\n                      onClick={withdrawToken}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                    >\r\n                      {!isWithdrawProcessing ? (\r\n                        'Withdraw'\r\n                      ) : (\r\n                        <>\r\n                          <CircularProgress color=\"secondary\" size={20} />\r\n                        </>\r\n                      )}\r\n                    </Button>\r\n                  </form>\r\n                )}\r\n              {stakingOption?.currentlyStaked === 0 && (\r\n                <div className=\"lockedHiFiWrapper\">\r\n                  <div className=\"lockedHiFiBlocker\">\r\n                    <div className=\"lockedTitle\">\r\n                      Can&apos;t withdraw - You have no $HiFi Staked into this\r\n                      option\r\n                    </div>\r\n                  </div>\r\n                  <TextField\r\n                    margin=\"dense\"\r\n                    label=\"Withdraw Amount\"\r\n                    fullWidth\r\n                    value={0}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <Button variant=\"contained\" color=\"primary\">\r\n                    {!isWithdrawProcessing ? (\r\n                      'Withdraw'\r\n                    ) : (\r\n                      <>\r\n                        <CircularProgress color=\"secondary\" size={20} />\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              )}\r\n              {stakingOption?.unlockMilliseconds >= 0 && (\r\n                <div className=\"lockedHiFiWrapper\">\r\n                  <div className=\"lockedHiFiBlocker\">\r\n                    <div className=\"lockedTitle\">$HiFi Locked, unlocks</div>\r\n                    <div className=\"lockedUntil\">\r\n                      {moment(stakingOption.unlockDate).format(\r\n                        'Do MMMM YYYY hh:mm:ss'\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <TextField\r\n                    margin=\"dense\"\r\n                    label=\"Withdraw Amount\"\r\n                    fullWidth\r\n                    value={0}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                  />\r\n                  <Button variant=\"contained\" color=\"primary\">\r\n                    {!isWithdrawProcessing ? (\r\n                      'Withdraw'\r\n                    ) : (\r\n                      <>\r\n                        <CircularProgress color=\"secondary\" size={20} />\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </Box>\r\n          </Grid>\r\n          {hasVesting && stakingOption?.currentlyStaked > 0 && (\r\n            <Grid item lg={12} md={12} sm={12} xs={12}>\r\n              <div className=\"stakingOptionVestingWarning\">\r\n                <>\r\n                  By staking more $HiFi into this option, you will reset the\r\n                  unlock date for all the $HiFi in this pool.\r\n                  <br />\r\n                  <br />\r\n                  The vesting period is : {stakingOption?.vestingPeriod}\r\n                </>\r\n              </div>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\">\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default StakingDailog;\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst CountdownTimer = (props) => {\r\n  const { expiryDateProp, callBackFunc } = props;\r\n  const [countdownTimer, setCountdownTimer] = useState('Loading..');\r\n\r\n  useEffect(() => {\r\n    const countDownTimer = (countDownDate) => {\r\n      // Update the count down every 1 second\r\n      const x = setInterval(async () => {\r\n        // Get today's date and time\r\n        const now = new Date().getTime();\r\n\r\n        // Find the distance between now and the count down date\r\n        const distance = countDownDate - now;\r\n\r\n        // Time calculations for days, hours, minutes and seconds\r\n        const days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n\r\n        let hours = Math.floor(\r\n          (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n        );\r\n        if (hours < 10) hours = `0${hours}`;\r\n\r\n        let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n        if (minutes < 10) minutes = `0${minutes}`;\r\n\r\n        let seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n        if (seconds < 10) seconds = `0${seconds}`;\r\n\r\n        setCountdownTimer(`${days}d : ${hours}h : ${minutes}m : ${seconds}s `);\r\n\r\n        // If the count down is over, write some text\r\n        if (distance < 0) {\r\n          clearInterval(x);\r\n          if (callBackFunc) {\r\n            callBackFunc([false, false, false]);\r\n          }\r\n        }\r\n      }, 1000);\r\n    };\r\n    countDownTimer(expiryDateProp);\r\n  }, [expiryDateProp, callBackFunc]);\r\n\r\n  return <>{countdownTimer}</>;\r\n};\r\n\r\nexport default CountdownTimer;\r\n","/* eslint-disable no-await-in-loop */\r\n/* eslint-disable no-plusplus */\r\nimport { useState, useEffect } from 'react';\r\nimport { v4 as uuid_v4 } from 'uuid';\r\nimport { useWeb3React } from '@web3-react/core';\r\n\r\nimport { BrowserView, MobileView } from 'react-device-detect';\r\n\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport moment from 'moment';\r\n\r\nimport TimelineIcon from '@mui/icons-material/Timeline';\r\n\r\nimport { useParams } from 'react-router-dom';\r\n\r\n// ** Import Material-Ui Components\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { walletAuthFetchWithSigPrompt } from '../../helpers/apiFetchWrappers';\r\nimport LevelTrackDialog from './LevelTrackDialog';\r\nimport StakingDialog from './StakingDialog';\r\nimport CountdownTimer from '../../components/CountdownTimer';\r\n\r\nimport {\r\n  _isValidChainId,\r\n  getMinimumNFTStakeAmount,\r\n  getTokenBalance,\r\n  getNFTStakingContractInstance,\r\n  parseBalance,\r\n} from '../../helpers';\r\n\r\nimport { IntoTheHifiverseNFTContract } from '../../constants';\r\n\r\nconst NFTView = (props) => {\r\n  const { wipeSignatureAndReRequest } = props;\r\n  const { id, collection } = useParams();\r\n\r\n  const { chainId, account } = useWeb3React();\r\n\r\n  const [nftData, setNftData] = useState(null);\r\n  const [stakingOptions, setStakingOptions] = useState(null);\r\n  const [selectedStakingOption, setSelectedStakingOption] = useState(null);\r\n  const [minDepositAmount, setMinDepositAmount] = useState(null);\r\n  const [tokenBalance, setTokenBalance] = useState(null);\r\n\r\n  // Dialogs\r\n  const [open, setOpen] = useState(false);\r\n  const [openStaking, setOpenStaking] = useState(false);\r\n\r\n  const handleClose = async () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = async () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleStakingClose = async () => {\r\n    setOpenStaking(false);\r\n  };\r\n\r\n  const handleStakingOpen = async (stakingOption) => {\r\n    setSelectedStakingOption(stakingOption);\r\n    setOpenStaking(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function init() {\r\n      const validChain = await _isValidChainId();\r\n      if (!validChain) {\r\n        toast.error('Unsupported network');\r\n      } else {\r\n        const url = `NFT/${collection}/${id}`;\r\n        const resp = await walletAuthFetchWithSigPrompt(\r\n          url,\r\n          'GET',\r\n          wipeSignatureAndReRequest,\r\n          account,\r\n          null,\r\n          true,\r\n          null\r\n        );\r\n\r\n        const minimumNFTStakeAmount = await getMinimumNFTStakeAmount();\r\n\r\n        if (account) {\r\n          const nftStakingContract = getNFTStakingContractInstance();\r\n          const userPoolsForNFT = await nftStakingContract.methods\r\n            .getUserPoolsForNFT(\r\n              account,\r\n              IntoTheHifiverseNFTContract,\r\n              Number(id)\r\n            )\r\n            .call();\r\n\r\n          const stakingOptionLength = await nftStakingContract.methods\r\n            .getStakingOptionLength()\r\n            .call();\r\n\r\n          const contractStakingOptions = [];\r\n          for (let j = 0; j < Number(stakingOptionLength); j++) {\r\n            const so = await nftStakingContract.methods\r\n              .stakingOptions(j)\r\n              .call();\r\n            contractStakingOptions.push(so);\r\n          }\r\n\r\n          for (let i = 0; i < userPoolsForNFT.length; i++) {\r\n            const index = Number(userPoolsForNFT[i]);\r\n            const matchingUserPool = await nftStakingContract.methods\r\n              .getUserPoolInfo(Number(index))\r\n              .call();\r\n            const matchingPool = await nftStakingContract.methods\r\n              .pools(Number(index) - 1)\r\n              .call();\r\n\r\n            // HIFI DTO STAKING OPTION\r\n            const matchedDBStakingOption = resp.stakingOptions.find(\r\n              (x) => x.index === Number(matchingPool.stakingOption)\r\n            );\r\n\r\n            if (matchedDBStakingOption != null) {\r\n              matchedDBStakingOption.currentlyStaked = parseBalance(\r\n                matchingUserPool.amount\r\n              );\r\n\r\n              const stakingOption =\r\n                contractStakingOptions[matchedDBStakingOption.index];\r\n              if (Number(stakingOption.duration) !== 0) {\r\n                const unlockDate = new Date(\r\n                  Number(matchingUserPool.vestingStart) * 1000\r\n                );\r\n                unlockDate.setSeconds(\r\n                  unlockDate.getSeconds() + Number(stakingOption.duration)\r\n                );\r\n                matchedDBStakingOption.unlockDate = unlockDate;\r\n                matchedDBStakingOption.unlockMilliseconds =\r\n                  unlockDate - new Date();\r\n              }\r\n            }\r\n          }\r\n\r\n          if (resp?.levelInfo.hoursUntilNextLevel !== null) {\r\n            const dt = new Date();\r\n            dt.setSeconds(\r\n              dt.getSeconds() + resp?.levelInfo.hoursUntilNextLevel * 3600\r\n            );\r\n            resp.levelInfo.dateOfNextLevel = dt;\r\n          }\r\n        }\r\n\r\n        setNftData(resp);\r\n        setStakingOptions(resp.stakingOptions);\r\n        setMinDepositAmount(minimumNFTStakeAmount);\r\n        setTokenBalance(await getTokenBalance());\r\n      }\r\n    }\r\n    // fetchNFTData();\r\n    init();\r\n  }, [account, chainId, collection, id, wipeSignatureAndReRequest]);\r\n\r\n  const stakingOption = (option) => (\r\n    <Box key={uuid_v4()} className=\"stakingOption\">\r\n      <div className=\"optionTitle\">{option.vestingPeriod}</div>\r\n      <Grid\r\n        container\r\n        item\r\n        lg={12}\r\n        md={12}\r\n        sm={12}\r\n        xs={12}\r\n        className=\"detailsWrapper\"\r\n      >\r\n        <Grid item lg={3} md={3} sm={6} xs={6}>\r\n          <Grid container item lg={12} md={12} sm={12} xs={12}>\r\n            <Grid item lg={12} md={12} sm={12} xs={12} className=\"detailHeader\">\r\n              Currently Staked\r\n              <hr />\r\n            </Grid>\r\n            <Grid item lg={12} md={12} sm={12} xs={12} className=\"detailValue\">\r\n              {Number(option.currentlyStaked).toLocaleString()}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item lg={2} md={2} sm={6} xs={6}>\r\n          <Grid container item lg={12} md={12} sm={12} xs={12}>\r\n            <Grid item lg={12} md={12} sm={12} xs={12} className=\"detailHeader\">\r\n              XP Bonus\r\n              <hr />\r\n            </Grid>\r\n            <Grid item lg={12} md={12} sm={12} xs={12} className=\"detailValue\">\r\n              {option.bonus}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item lg={4} md={4} sm={6} xs={6}>\r\n          <Grid container item lg={12} md={12} sm={12} xs={12}>\r\n            <Grid item lg={12} md={12} sm={12} xs={12} className=\"detailHeader\">\r\n              Locked Until\r\n              <hr />\r\n            </Grid>\r\n            <Grid item lg={12} md={12} sm={12} xs={12} className=\"detailValue\">\r\n              {Number(option.currentlyStaked) > 0 &&\r\n                option.unlockDate != null && (\r\n                  <>\r\n                    {moment(option.unlockDate).format('Do MMMM YYYY hh:mm:ss')}\r\n                  </>\r\n                )}\r\n              {option.currentlyStaked <= 0 ||\r\n                (option.unlockDate === null && <>N/A</>)}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item lg={3} md={3} sm={6} xs={6}>\r\n          <Button\r\n            onClick={() => handleStakingOpen(option)}\r\n            className=\"stakeButton\"\r\n          >\r\n            Deposit / Withdraw\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n\r\n  const NFTProperties = () => (\r\n    <CardContent className=\"propertiesWrapper\">\r\n      {nftData?.properties?.length > 0 &&\r\n        nftData?.properties.map((prop) => (\r\n          <Grid container key={uuid_v4()} className=\"prop\">\r\n            <Grid item lg={4} md={4} sm={6} xs={6} className=\"propSlot\">\r\n              {prop.slot}\r\n            </Grid>\r\n            <Grid item lg={8} md={8} sm={6} xs={6} className=\"propValue\">\r\n              {prop.value}{' '}\r\n            </Grid>\r\n          </Grid>\r\n        ))}\r\n    </CardContent>\r\n  );\r\n\r\n  const HeaderCard = () => (\r\n    <Card className=\"headerCard\">\r\n      <CardContent>\r\n        <Grid container>\r\n          <Grid item lg={3} md={3} sm={12} xs={12}>\r\n            <img\r\n              src={\r\n                `${process.env.REACT_APP_API_URL}/${nftData?.image}` ??\r\n                `${process.env.REACT_APP_API_URL}/${nftData?.image}`\r\n              }\r\n              alt=\"nftImg\"\r\n              className=\"nftImg\"\r\n              style={{ width: '100%' }}\r\n            />\r\n          </Grid>\r\n          <Grid item lg={8} md={8} sm={12} xs={12} className=\"nftInfoWrapper\">\r\n            <div className=\"name\">{nftData?.name}</div>\r\n            <div className=\"info tier\">Tier: {nftData?.tierReadable}</div>\r\n            {nftData?.levelInfo && (\r\n              <div className=\"info\">\r\n                Total HiFi Staked:{' '}\r\n                <span>{nftData?.levelInfo.tokensStaked.toLocaleString()}</span>\r\n              </div>\r\n            )}\r\n            {nftData?.levelInfo.hoursUntilNextLevel !== null && (\r\n              <div className=\"info\">\r\n                Time until next level:{' '}\r\n                <span>\r\n                  <CountdownTimer\r\n                    expiryDateProp={nftData?.levelInfo.dateOfNextLevel}\r\n                  />\r\n                </span>\r\n              </div>\r\n            )}\r\n\r\n            {nftData?.info?.length > 0 && (\r\n              <Grid container className=\"infoBoxes\">\r\n                {nftData.info.map((info) => (\r\n                  <Grid\r\n                    key={uuid_v4()}\r\n                    item\r\n                    lg={6}\r\n                    md={6}\r\n                    sm={12}\r\n                    xs={12}\r\n                    className=\"infoBox info\"\r\n                  >\r\n                    <div className=\"header\">\r\n                      {info.title}\r\n                      {info.type === 0 && (\r\n                        <div className=\"levelTrack\">\r\n                          <TimelineIcon onClick={handleOpen} />\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"info\">{info?.value}</div>\r\n                    {info.additionalInfo && (\r\n                      <div className=\"info\">{info.additionalInfo}</div>\r\n                    )}\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <BrowserView className=\"nftView\">\r\n        <HeaderCard />\r\n\r\n        <Grid container direction=\"row\" spacing={2}>\r\n          <Grid item lg={4} md={4} sm={12} xs={12}>\r\n            <Grid container>\r\n              <Card className=\"propertiesCard\">\r\n                Properties\r\n                <NFTProperties />\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item lg={8} md={8} sm={12} xs={12}>\r\n            <Grid container>\r\n              <Card className=\"stakingCard\">\r\n                Staking\r\n                <div className=\"optionsWrapper\">\r\n                  {stakingOptions?.length > 0 &&\r\n                    stakingOptions.map((option) => stakingOption(option))}\r\n                </div>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </BrowserView>\r\n      <MobileView className=\"nftView mobile\">\r\n        <HeaderCard />\r\n\r\n        <Grid container direction=\"row\" spacing={2}>\r\n          <Grid item lg={4} md={4} sm={12} xs={12}>\r\n            <Grid container>\r\n              <Card className=\"propertiesCard\">\r\n                Properties\r\n                <NFTProperties />\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item lg={8} md={8} sm={12} xs={12}>\r\n            <Grid container>\r\n              <Card className=\"stakingCard\">\r\n                Staking\r\n                <div className=\"optionsWrapper\">\r\n                  {stakingOptions?.length > 0 &&\r\n                    stakingOptions.map((option) => stakingOption(option))}\r\n                </div>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </MobileView>\r\n      <StakingDialog\r\n        open={openStaking}\r\n        handleClose={handleStakingClose}\r\n        stakingOption={selectedStakingOption}\r\n        minDepositAmount={minDepositAmount}\r\n        nftIndex={id}\r\n        tokenBalance={tokenBalance}\r\n      />\r\n\r\n      {nftData?.levelTrack && (\r\n        <LevelTrackDialog\r\n          open={open}\r\n          handleClose={handleClose}\r\n          levelTrack={nftData.levelTrack}\r\n          currentLevel={nftData.levelInfo.currentLevel}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NFTView;\r\n"],"sourceRoot":""}